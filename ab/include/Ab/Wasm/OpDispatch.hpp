#ifndef AB_OPDISPATCH_HPP_
#define AB_OPDISPATCH_HPP_

namespace Ab {
namespace Wasm {

/// Takes a function template Function, and instantiates it on the OpCode.
template <template <OpCode> class Function, typename... Args>
inline auto opDispatch(OpCode op, Args&&... args)
	-> decltype(std::declval<Function<OpCode::UNREACHABLE>>()(std::forward<Args>(args)...)) {
	switch (op) {
	case OpCode::UNREACHABLE:
		return Function<OpCode::UNREACHABLE>()(std::forward<Args>(args)...);
	case OpCode::NOP:
		return Function<OpCode::NOP>()(std::forward<Args>(args)...);
	case OpCode::BLOCK:
		return Function<OpCode::BLOCK>()(std::forward<Args>(args)...);
	case OpCode::LOOP:
		return Function<OpCode::LOOP>()(std::forward<Args>(args)...);
	case OpCode::IF:
		return Function<OpCode::IF>()(std::forward<Args>(args)...);
	case OpCode::ELSE:
		return Function<OpCode::ELSE>()(std::forward<Args>(args)...);
	case OpCode::END:
		return Function<OpCode::END>()(std::forward<Args>(args)...);
	case OpCode::BR:
		return Function<OpCode::BR>()(std::forward<Args>(args)...);
	case OpCode::BR_IF:
		return Function<OpCode::BR_IF>()(std::forward<Args>(args)...);
	case OpCode::BR_TABLE:
		return Function<OpCode::BR_TABLE>()(std::forward<Args>(args)...);
	case OpCode::RETURN:
		return Function<OpCode::RETURN>()(std::forward<Args>(args)...);
	case OpCode::CALL:
		return Function<OpCode::CALL>()(std::forward<Args>(args)...);
	case OpCode::CALL_INDIRECT:
		return Function<OpCode::CALL_INDIRECT>()(std::forward<Args>(args)...);
	case OpCode::DROP:
		return Function<OpCode::DROP>()(std::forward<Args>(args)...);
	case OpCode::SELECT:
		return Function<OpCode::SELECT>()(std::forward<Args>(args)...);
	case OpCode::GET_LOCAL:
		return Function<OpCode::GET_LOCAL>()(std::forward<Args>(args)...);
	case OpCode::SET_LOCAL:
		return Function<OpCode::SET_LOCAL>()(std::forward<Args>(args)...);
	case OpCode::TEE_LOCAL:
		return Function<OpCode::TEE_LOCAL>()(std::forward<Args>(args)...);
	case OpCode::GET_GLOBAL:
		return Function<OpCode::GET_GLOBAL>()(std::forward<Args>(args)...);
	case OpCode::SET_GLOBAL:
		return Function<OpCode::SET_GLOBAL>()(std::forward<Args>(args)...);
	case OpCode::I32_LOAD:
		return Function<OpCode::I32_LOAD>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD:
		return Function<OpCode::I64_LOAD>()(std::forward<Args>(args)...);
	case OpCode::F32_LOAD:
		return Function<OpCode::F32_LOAD>()(std::forward<Args>(args)...);
	case OpCode::F64_LOAD:
		return Function<OpCode::F64_LOAD>()(std::forward<Args>(args)...);
	case OpCode::I32_LOAD8_S:
		return Function<OpCode::I32_LOAD8_S>()(std::forward<Args>(args)...);
	case OpCode::I32_LOAD8_U:
		return Function<OpCode::I32_LOAD8_U>()(std::forward<Args>(args)...);
	case OpCode::I32_LOAD16_S:
		return Function<OpCode::I32_LOAD16_S>()(std::forward<Args>(args)...);
	case OpCode::I32_LOAD16_U:
		return Function<OpCode::I32_LOAD16_U>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD8_S:
		return Function<OpCode::I64_LOAD8_S>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD8_U:
		return Function<OpCode::I64_LOAD8_U>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD16_S:
		return Function<OpCode::I64_LOAD16_S>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD16_U:
		return Function<OpCode::I64_LOAD16_U>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD32_S:
		return Function<OpCode::I64_LOAD32_S>()(std::forward<Args>(args)...);
	case OpCode::I64_LOAD32_U:
		return Function<OpCode::I64_LOAD32_U>()(std::forward<Args>(args)...);
	case OpCode::I32_STORE:
		return Function<OpCode::I32_STORE>()(std::forward<Args>(args)...);
	case OpCode::I64_STORE:
		return Function<OpCode::I64_STORE>()(std::forward<Args>(args)...);
	case OpCode::F32_STORE:
		return Function<OpCode::F32_STORE>()(std::forward<Args>(args)...);
	case OpCode::F64_STORE:
		return Function<OpCode::F64_STORE>()(std::forward<Args>(args)...);
	case OpCode::I32_STORE8:
		return Function<OpCode::I32_STORE8>()(std::forward<Args>(args)...);
	case OpCode::I32_STORE16:
		return Function<OpCode::I32_STORE16>()(std::forward<Args>(args)...);
	case OpCode::I64_STORE8:
		return Function<OpCode::I64_STORE8>()(std::forward<Args>(args)...);
	case OpCode::I64_STORE16:
		return Function<OpCode::I64_STORE16>()(std::forward<Args>(args)...);
	case OpCode::I64_STORE32:
		return Function<OpCode::I64_STORE32>()(std::forward<Args>(args)...);
	case OpCode::CURRENT_MEMORY:
		return Function<OpCode::CURRENT_MEMORY>()(std::forward<Args>(args)...);
	case OpCode::GROW_MEMORY:
		return Function<OpCode::GROW_MEMORY>()(std::forward<Args>(args)...);
	case OpCode::I32_CONST:
		return Function<OpCode::I32_CONST>()(std::forward<Args>(args)...);
	case OpCode::I64_CONST:
		return Function<OpCode::I64_CONST>()(std::forward<Args>(args)...);
	case OpCode::F32_CONST:
		return Function<OpCode::F32_CONST>()(std::forward<Args>(args)...);
	case OpCode::F64_CONST:
		return Function<OpCode::F64_CONST>()(std::forward<Args>(args)...);
	case OpCode::I32_EQZ:
		return Function<OpCode::I32_EQZ>()(std::forward<Args>(args)...);
	case OpCode::I32_EQ:
		return Function<OpCode::I32_EQ>()(std::forward<Args>(args)...);
	case OpCode::I32_NE:
		return Function<OpCode::I32_NE>()(std::forward<Args>(args)...);
	case OpCode::I32_LT_S:
		return Function<OpCode::I32_LT_S>()(std::forward<Args>(args)...);
	case OpCode::I32_LT_U:
		return Function<OpCode::I32_LT_U>()(std::forward<Args>(args)...);
	case OpCode::I32_GT_S:
		return Function<OpCode::I32_GT_S>()(std::forward<Args>(args)...);
	case OpCode::I32_GT_U:
		return Function<OpCode::I32_GT_U>()(std::forward<Args>(args)...);
	case OpCode::I32_LE_S:
		return Function<OpCode::I32_LE_S>()(std::forward<Args>(args)...);
	case OpCode::I32_LE_U:
		return Function<OpCode::I32_LE_U>()(std::forward<Args>(args)...);
	case OpCode::I32_GE_S:
		return Function<OpCode::I32_GE_S>()(std::forward<Args>(args)...);
	case OpCode::I32_GE_U:
		return Function<OpCode::I32_GE_U>()(std::forward<Args>(args)...);
	case OpCode::I64_EQZ:
		return Function<OpCode::I64_EQZ>()(std::forward<Args>(args)...);
	case OpCode::I64_EQ:
		return Function<OpCode::I64_EQ>()(std::forward<Args>(args)...);
	case OpCode::I64_NE:
		return Function<OpCode::I64_NE>()(std::forward<Args>(args)...);
	case OpCode::I64_LT_S:
		return Function<OpCode::I64_LT_S>()(std::forward<Args>(args)...);
	case OpCode::I64_LT_U:
		return Function<OpCode::I64_LT_U>()(std::forward<Args>(args)...);
	case OpCode::I64_GT_S:
		return Function<OpCode::I64_GT_S>()(std::forward<Args>(args)...);
	case OpCode::I64_GT_U:
		return Function<OpCode::I64_GT_U>()(std::forward<Args>(args)...);
	case OpCode::I64_LE_S:
		return Function<OpCode::I64_LE_S>()(std::forward<Args>(args)...);
	case OpCode::I64_LE_U:
		return Function<OpCode::I64_LE_U>()(std::forward<Args>(args)...);
	case OpCode::I64_GE_S:
		return Function<OpCode::I64_GE_S>()(std::forward<Args>(args)...);
	case OpCode::I64_GE_U:
		return Function<OpCode::I64_GE_U>()(std::forward<Args>(args)...);
	case OpCode::F32_EQ:
		return Function<OpCode::F32_EQ>()(std::forward<Args>(args)...);
	case OpCode::F32_NE:
		return Function<OpCode::F32_NE>()(std::forward<Args>(args)...);
	case OpCode::F32_LT:
		return Function<OpCode::F32_LT>()(std::forward<Args>(args)...);
	case OpCode::F32_GT:
		return Function<OpCode::F32_GT>()(std::forward<Args>(args)...);
	case OpCode::F32_LE:
		return Function<OpCode::F32_LE>()(std::forward<Args>(args)...);
	case OpCode::F32_GE:
		return Function<OpCode::F32_GE>()(std::forward<Args>(args)...);
	case OpCode::F64_EQ:
		return Function<OpCode::F64_EQ>()(std::forward<Args>(args)...);
	case OpCode::F64_NE:
		return Function<OpCode::F64_NE>()(std::forward<Args>(args)...);
	case OpCode::F64_LT:
		return Function<OpCode::F64_LT>()(std::forward<Args>(args)...);
	case OpCode::F64_GT:
		return Function<OpCode::F64_GT>()(std::forward<Args>(args)...);
	case OpCode::F64_LE:
		return Function<OpCode::F64_LE>()(std::forward<Args>(args)...);
	case OpCode::F64_GE:
		return Function<OpCode::F64_GE>()(std::forward<Args>(args)...);
	case OpCode::I32_CLZ:
		return Function<OpCode::I32_CLZ>()(std::forward<Args>(args)...);
	case OpCode::I32_CTZ:
		return Function<OpCode::I32_CTZ>()(std::forward<Args>(args)...);
	case OpCode::I32_POPCNT:
		return Function<OpCode::I32_POPCNT>()(std::forward<Args>(args)...);
	case OpCode::I32_ADD:
		return Function<OpCode::I32_ADD>()(std::forward<Args>(args)...);
	case OpCode::I32_SUB:
		return Function<OpCode::I32_SUB>()(std::forward<Args>(args)...);
	case OpCode::I32_MUL:
		return Function<OpCode::I32_MUL>()(std::forward<Args>(args)...);
	case OpCode::I32_DIV_S:
		return Function<OpCode::I32_DIV_S>()(std::forward<Args>(args)...);
	case OpCode::I32_DIV_U:
		return Function<OpCode::I32_DIV_U>()(std::forward<Args>(args)...);
	case OpCode::I32_REM_S:
		return Function<OpCode::I32_REM_S>()(std::forward<Args>(args)...);
	case OpCode::I32_REM_U:
		return Function<OpCode::I32_REM_U>()(std::forward<Args>(args)...);
	case OpCode::I32_AND:
		return Function<OpCode::I32_AND>()(std::forward<Args>(args)...);
	case OpCode::I32_OR:
		return Function<OpCode::I32_OR>()(std::forward<Args>(args)...);
	case OpCode::I32_XOR:
		return Function<OpCode::I32_XOR>()(std::forward<Args>(args)...);
	case OpCode::I32_SHL:
		return Function<OpCode::I32_SHL>()(std::forward<Args>(args)...);
	case OpCode::I32_SHR_S:
		return Function<OpCode::I32_SHR_S>()(std::forward<Args>(args)...);
	case OpCode::I32_SHR_U:
		return Function<OpCode::I32_SHR_U>()(std::forward<Args>(args)...);
	case OpCode::I32_ROTL:
		return Function<OpCode::I32_ROTL>()(std::forward<Args>(args)...);
	case OpCode::I32_ROTR:
		return Function<OpCode::I32_ROTR>()(std::forward<Args>(args)...);
	case OpCode::I64_CLZ:
		return Function<OpCode::I64_CLZ>()(std::forward<Args>(args)...);
	case OpCode::I64_CTZ:
		return Function<OpCode::I64_CTZ>()(std::forward<Args>(args)...);
	case OpCode::I64_POPCNT:
		return Function<OpCode::I64_POPCNT>()(std::forward<Args>(args)...);
	case OpCode::I64_ADD:
		return Function<OpCode::I64_ADD>()(std::forward<Args>(args)...);
	case OpCode::I64_SUB:
		return Function<OpCode::I64_SUB>()(std::forward<Args>(args)...);
	case OpCode::I64_MUL:
		return Function<OpCode::I64_MUL>()(std::forward<Args>(args)...);
	case OpCode::I64_DIV_S:
		return Function<OpCode::I64_DIV_S>()(std::forward<Args>(args)...);
	case OpCode::I64_DIV_U:
		return Function<OpCode::I64_DIV_U>()(std::forward<Args>(args)...);
	case OpCode::I64_REM_S:
		return Function<OpCode::I64_REM_S>()(std::forward<Args>(args)...);
	case OpCode::I64_REM_U:
		return Function<OpCode::I64_REM_U>()(std::forward<Args>(args)...);
	case OpCode::I64_AND:
		return Function<OpCode::I64_AND>()(std::forward<Args>(args)...);
	case OpCode::I64_OR:
		return Function<OpCode::I64_OR>()(std::forward<Args>(args)...);
	case OpCode::I64_XOR:
		return Function<OpCode::I64_XOR>()(std::forward<Args>(args)...);
	case OpCode::I64_SHL:
		return Function<OpCode::I64_SHL>()(std::forward<Args>(args)...);
	case OpCode::I64_SHR_S:
		return Function<OpCode::I64_SHR_S>()(std::forward<Args>(args)...);
	case OpCode::I64_SHR_U:
		return Function<OpCode::I64_SHR_U>()(std::forward<Args>(args)...);
	case OpCode::I64_ROTL:
		return Function<OpCode::I64_ROTL>()(std::forward<Args>(args)...);
	case OpCode::I64_ROTR:
		return Function<OpCode::I64_ROTR>()(std::forward<Args>(args)...);
	case OpCode::F32_ABS:
		return Function<OpCode::F32_ABS>()(std::forward<Args>(args)...);
	case OpCode::F32_NEG:
		return Function<OpCode::F32_NEG>()(std::forward<Args>(args)...);
	case OpCode::F32_CEIL:
		return Function<OpCode::F32_CEIL>()(std::forward<Args>(args)...);
	case OpCode::F32_FLOOR:
		return Function<OpCode::F32_FLOOR>()(std::forward<Args>(args)...);
	case OpCode::F32_TRUNC:
		return Function<OpCode::F32_TRUNC>()(std::forward<Args>(args)...);
	case OpCode::F32_NEAREST:
		return Function<OpCode::F32_NEAREST>()(std::forward<Args>(args)...);
	case OpCode::F32_SQRT:
		return Function<OpCode::F32_SQRT>()(std::forward<Args>(args)...);
	case OpCode::F32_ADD:
		return Function<OpCode::F32_ADD>()(std::forward<Args>(args)...);
	case OpCode::F32_SUB:
		return Function<OpCode::F32_SUB>()(std::forward<Args>(args)...);
	case OpCode::F32_MUL:
		return Function<OpCode::F32_MUL>()(std::forward<Args>(args)...);
	case OpCode::F32_DIV:
		return Function<OpCode::F32_DIV>()(std::forward<Args>(args)...);
	case OpCode::F32_MIN:
		return Function<OpCode::F32_MIN>()(std::forward<Args>(args)...);
	case OpCode::F32_MAX:
		return Function<OpCode::F32_MAX>()(std::forward<Args>(args)...);
	case OpCode::F32_COPYSIGN:
		return Function<OpCode::F32_COPYSIGN>()(std::forward<Args>(args)...);
	case OpCode::F64_ABS:
		return Function<OpCode::F64_ABS>()(std::forward<Args>(args)...);
	case OpCode::F64_NEG:
		return Function<OpCode::F64_NEG>()(std::forward<Args>(args)...);
	case OpCode::F64_CEIL:
		return Function<OpCode::F64_CEIL>()(std::forward<Args>(args)...);
	case OpCode::F64_FLOOR:
		return Function<OpCode::F64_FLOOR>()(std::forward<Args>(args)...);
	case OpCode::F64_TRUNC:
		return Function<OpCode::F64_TRUNC>()(std::forward<Args>(args)...);
	case OpCode::F64_NEAREST:
		return Function<OpCode::F64_NEAREST>()(std::forward<Args>(args)...);
	case OpCode::F64_SQRT:
		return Function<OpCode::F64_SQRT>()(std::forward<Args>(args)...);
	case OpCode::F64_ADD:
		return Function<OpCode::F64_ADD>()(std::forward<Args>(args)...);
	case OpCode::F64_SUB:
		return Function<OpCode::F64_SUB>()(std::forward<Args>(args)...);
	case OpCode::F64_MUL:
		return Function<OpCode::F64_MUL>()(std::forward<Args>(args)...);
	case OpCode::F64_DIV:
		return Function<OpCode::F64_DIV>()(std::forward<Args>(args)...);
	case OpCode::F64_MIN:
		return Function<OpCode::F64_MIN>()(std::forward<Args>(args)...);
	case OpCode::F64_MAX:
		return Function<OpCode::F64_MAX>()(std::forward<Args>(args)...);
	case OpCode::F64_COPYSIGN:
		return Function<OpCode::F64_COPYSIGN>()(std::forward<Args>(args)...);
	case OpCode::I32_WRAP_I64:
		return Function<OpCode::I32_WRAP_I64>()(std::forward<Args>(args)...);
	case OpCode::I32_TRUNC_S_F32:
		return Function<OpCode::I32_TRUNC_S_F32>()(std::forward<Args>(args)...);
	case OpCode::I32_TRUNC_U_F32:
		return Function<OpCode::I32_TRUNC_U_F32>()(std::forward<Args>(args)...);
	case OpCode::I32_TRUNC_S_F64:
		return Function<OpCode::I32_TRUNC_S_F64>()(std::forward<Args>(args)...);
	case OpCode::I32_TRUNC_U_F64:
		return Function<OpCode::I32_TRUNC_U_F64>()(std::forward<Args>(args)...);
	case OpCode::I64_EXTEND_S_I32:
		return Function<OpCode::I64_EXTEND_S_I32>()(std::forward<Args>(args)...);
	case OpCode::I64_EXTEND_U_I32:
		return Function<OpCode::I64_EXTEND_U_I32>()(std::forward<Args>(args)...);
	case OpCode::I64_TRUNC_S_F32:
		return Function<OpCode::I64_TRUNC_S_F32>()(std::forward<Args>(args)...);
	case OpCode::I64_TRUNC_U_F32:
		return Function<OpCode::I64_TRUNC_U_F32>()(std::forward<Args>(args)...);
	case OpCode::I64_TRUNC_S_F64:
		return Function<OpCode::I64_TRUNC_S_F64>()(std::forward<Args>(args)...);
	case OpCode::I64_TRUNC_U_F64:
		return Function<OpCode::I64_TRUNC_U_F64>()(std::forward<Args>(args)...);
	case OpCode::F32_CONVERT_S_I32:
		return Function<OpCode::F32_CONVERT_S_I32>()(std::forward<Args>(args)...);
	case OpCode::F32_CONVERT_U_I32:
		return Function<OpCode::F32_CONVERT_U_I32>()(std::forward<Args>(args)...);
	case OpCode::F32_CONVERT_S_I64:
		return Function<OpCode::F32_CONVERT_S_I64>()(std::forward<Args>(args)...);
	case OpCode::F32_CONVERT_U_I64:
		return Function<OpCode::F32_CONVERT_U_I64>()(std::forward<Args>(args)...);
	case OpCode::F32_DEMOTE_F64:
		return Function<OpCode::F32_DEMOTE_F64>()(std::forward<Args>(args)...);
	case OpCode::F64_CONVERT_S_I32:
		return Function<OpCode::F64_CONVERT_S_I32>()(std::forward<Args>(args)...);
	case OpCode::F64_CONVERT_U_I32:
		return Function<OpCode::F64_CONVERT_U_I32>()(std::forward<Args>(args)...);
	case OpCode::F64_CONVERT_S_I64:
		return Function<OpCode::F64_CONVERT_S_I64>()(std::forward<Args>(args)...);
	case OpCode::F64_CONVERT_U_I64:
		return Function<OpCode::F64_CONVERT_U_I64>()(std::forward<Args>(args)...);
	case OpCode::F64_PROMOTE_F32:
		return Function<OpCode::F64_PROMOTE_F32>()(std::forward<Args>(args)...);
	case OpCode::I32_REINTERPRET_F32:
		return Function<OpCode::I32_REINTERPRET_F32>()(std::forward<Args>(args)...);
	case OpCode::I64_REINTERPRET_F64:
		return Function<OpCode::I64_REINTERPRET_F64>()(std::forward<Args>(args)...);
	case OpCode::F32_REINTERPRET_I32:
		return Function<OpCode::F32_REINTERPRET_I32>()(std::forward<Args>(args)...);
	case OpCode::F64_REINTERPRET_I64:
		return Function<OpCode::F64_REINTERPRET_I64>()(std::forward<Args>(args)...);
	default:
		throw std::runtime_error{"unknown opcode"};
	}
}

} // namespace Wasm
} // namespace Ab

#endif // AB_OPDISPATCH_HPP_
